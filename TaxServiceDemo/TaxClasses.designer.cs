#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaxServiceDemo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
    using System.Globalization;	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TaxesDatabase")]
	public partial class TaxClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    #endregion
		
		public TaxClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TaxesDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TaxClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaxClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaxClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaxClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tax> Taxes
		{
			get
			{
				return this.GetTable<Tax>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tax")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Tax
	{
		
		private string _Town;
		
		private System.DateTime _DateBegin;
		
		private System.DateTime _DateEnd;
		
		private int _TimeSpan;
		
		private double _Rate;
		
		private int _Id;
		
		public Tax()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public string Town
		{
			get
			{
				return this._Town.Trim();
			}
			set
			{
                string v = value.Trim();
				if ((this._Town != v))
				{
					this._Town = v;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBegin", DbType="DateTime NOT NULL")]
		public System.DateTime DateBegin
		{
			get
			{
				return this._DateBegin;
			}
			set
			{
				if ((this._DateBegin != value))
				{
					this._DateBegin = value;
				}
			}
		}

        [DataMember(Order = 2, Name = "DateBegin")]
        private string dateBeginSerialized { get; set; }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this._DateEnd = value;
				}
			}
		}

        [DataMember(Order = 3, Name = "DateEnd")]
        private string dateEndSerialized { get; set; }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSpan", DbType="Int NOT NULL")]
		public int TimeSpan
		{
			get
			{
				return this._TimeSpan;
			}
			set
			{
				if ((this._TimeSpan != value))
				{
					this._TimeSpan = value;
				}
			}
		}

        public TaxTimeSpan TaxTimeSpan
        {
            get
            {
                return (TaxTimeSpan)this.TimeSpan;
            }
            set
            {
                if ((this.TimeSpan != (int)value))
                {
                    this.TimeSpan = (int)value;
                }
            }
        }

        [DataMember(Order = 4, Name = "TimeSpan")]
        private string timeSpanSerialized { get; set; }

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public double Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(IsPrimaryKey=true, Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}

        [OnSerializing]
        void OnSerializing(StreamingContext context)
        {
            this.dateBeginSerialized = this.DateBegin.ToString("yyyy.MM.dd", CultureInfo.InvariantCulture);
            this.dateEndSerialized = this.DateEnd.ToString("yyyy.MM.dd", CultureInfo.InvariantCulture);
            this.timeSpanSerialized = this.TaxTimeSpan.ToString();
        }

        [OnDeserialized]
        void OnDeserializing(StreamingContext context)
        {
            if (this.dateBeginSerialized == null)
            {
                this.DateBegin = default(DateTime);
            }
            else
            {
                this.DateBegin = DateTime.ParseExact(this.dateBeginSerialized, "yyyy.MM.dd", CultureInfo.InvariantCulture);
            }
            if (this.dateEndSerialized == null)
            {
                this.DateEnd = default(DateTime);
            }
            else
            {
                this.DateEnd = DateTime.ParseExact(this.dateEndSerialized, "yyyy.MM.dd", CultureInfo.InvariantCulture);
            }
            if (this.timeSpanSerialized == null)
            {
                this.TaxTimeSpan = (int)TaxTimeSpan.Year;
            }
            else
            {
                TaxTimeSpan timeSpan;
                Enum.TryParse(this.timeSpanSerialized, out timeSpan);
                this.TaxTimeSpan = timeSpan;
            }
        }
	}
}
#pragma warning restore 1591
